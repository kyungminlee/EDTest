var documenterSearchIndex = {"docs":
[{"location":"#ExactDiagonalization-1","page":"ExactDiagonalization","title":"ExactDiagonalization","text":"","category":"section"},{"location":"#","page":"ExactDiagonalization","title":"ExactDiagonalization","text":"Implements exact diagonalization","category":"page"},{"location":"#","page":"ExactDiagonalization","title":"ExactDiagonalization","text":"Modules = [ExactDiagonalization]","category":"page"},{"location":"#ExactDiagonalization.AbstractHilbertSpace","page":"ExactDiagonalization","title":"ExactDiagonalization.AbstractHilbertSpace","text":"AbstractHilbertSpace{QN}\n\nAbstract Hilbert space with quantum number type QN.\n\nExamples\n\njulia> using ExactDiagonalization\n\njulia> spin_site = Site{Int64}([State{Int64}(\"Up\", +1), State{Int64}(\"Dn\", -1)])\nSite{Int64}(State{Int64}[State{Int64}(\"Up\", 1), State{Int64}(\"Dn\", -1)])\n\njulia> hs = AbstractHilbertSpace{Int64}([spin_site, spin_site])\nAbstractHilbertSpace{Int64}(Site{Int64}[Site{Int64}(State{Int64}[State{Int64}(\"Up\", 1), State{Int64}(\"Dn\", -1)]), Site{Int64}(State{Int64}[State{Int64}(\"Up\", 1), State{Int64}(\"Dn\", -1)])], [1, 1], [0, 1, 2])\n\n\n\n\n\n","category":"type"},{"location":"#ExactDiagonalization.Site","page":"ExactDiagonalization","title":"ExactDiagonalization.Site","text":"Site{QN}\n\nA site with quantum number type QN.\n\nExamples\n\njulia> using ExactDiagonalization\n\njulia> up = State{Int}(\"Up\", 1); dn = State{Int}(\"Dn\", -1);\n\njulia> Site([up, dn])\nSite{Int64}(State{Int64}[State{Int64}(\"Up\", 1), State{Int64}(\"Dn\", -1)])\n\n\n\n\n\n","category":"type"},{"location":"#ExactDiagonalization.SparseState","page":"ExactDiagonalization","title":"ExactDiagonalization.SparseState","text":"struct SparseState{Scalar<:Number, BR}\n\nRepresents a row vector?\n\n\n\n\n\n","category":"type"},{"location":"#ExactDiagonalization.State","page":"ExactDiagonalization","title":"ExactDiagonalization.State","text":"State{QN}\n\nState with quantum number type QN.\n\nExamples\n\njulia> using ExactDiagonalization, StaticArrays\n\njulia> up = State{Int}(\"Up\", 1)\nState{Int64}(\"Up\", 1)\n\njulia> State(\"Dn\", SVector{2, Int}([-1, 1]))\nState{SArray{Tuple{2},Int64,1,2}}(\"Dn\", [-1, 1]) \n\n\n\n\n\n","category":"type"},{"location":"#ExactDiagonalization.bitwidth-Tuple{Site}","page":"ExactDiagonalization","title":"ExactDiagonalization.bitwidth","text":"bitwidth(site ::Site)\n\nNumber of bits necessary to represent the states of the given site.\n\n\n\n\n\n","category":"method"},{"location":"#ExactDiagonalization.compress-Union{Tuple{I}, Tuple{QN}, Tuple{AbstractHilbertSpace{QN},AbstractArray{I,1}}} where I<:Integer where QN","page":"ExactDiagonalization","title":"ExactDiagonalization.compress","text":"Convert an array of indices (of states) to binary representation \n\n\n\n\n\n","category":"method"},{"location":"#ExactDiagonalization.dimension-Tuple{Site}","page":"ExactDiagonalization","title":"ExactDiagonalization.dimension","text":"dimension(site ::Site)\n\nHilbert space dimension of a given site ( = number of states).\n\n\n\n\n\n","category":"method"},{"location":"#ExactDiagonalization.extract-Union{Tuple{U}, Tuple{QN}, Tuple{AbstractHilbertSpace{QN},U}} where U<:Unsigned where QN","page":"ExactDiagonalization","title":"ExactDiagonalization.extract","text":"Convert binary representation to an array of indices (of states)\n\nExamples ≡≡≡≡≡≡≡≡≡≡\n\n\n\n\n\n\n\n","category":"method"},{"location":"#ExactDiagonalization.get_state-Union{Tuple{BR}, Tuple{QN}, Tuple{Site{QN},BR}} where BR<:Unsigned where QN","page":"ExactDiagonalization","title":"ExactDiagonalization.get_state","text":"get_state(site ::Site{QN}, binrep ::BR) where {QN, BR<:Unsigned}\n\nReturns the state of site represented by the bits binrep.\n\n\n\n\n\n","category":"method"}]
}
